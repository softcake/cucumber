/*
 * Copyright 2018 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
        classpath "gradle.plugin.com.zyxist:chainsaw:0.1.3"
        classpath "com.netflix.nebula:nebula-project-plugin:3.4.1"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "ru.vyarus:gradle-pom-plugin:1.2.0"
        classpath "net.nemerosa:versioning:2.0.0"
        classpath "ru.vyarus:gradle-github-info-plugin:1.1.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
        classpath "gradle.plugin.de.gliderpilot.gradle.semantic-release:gradle-semantic-release-plugin:1.4.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.2"
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
//        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.0"
       classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
//        classpath "de.schauderhaft.degraph:degraph-check:0.1.4"
//        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.7"
//        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16"
//        classpath "com.gradle:build-scan-plugin:1.11"
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"

    }
}

description = "The Cucumber Project"

allprojects {

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    apply plugin: "ru.vyarus.github-info"
    github {
        user "softcake"
        license "Apache"
        repository rootProject.name
    }

    group = "${reverseDomain}.${github.repository}"

}

ext {
    junit4Version = "4.12"
    junitVintageVersion = "5.1.0"
    junitPlatformVersion = "1.1.0"
    junitJupiterVersion = "5.1.0"
    log4jVersion = "2.9.0"
}

ext {

    publishedModules = getPublishedProjects()

    integTestModules = publishedModules.findAll {
        (it.name in ["cucumber.actors"])
    }

    benchmarkModules = publishedModules.findAll {
        (it.name in ["cucumber.actors"])
    }

    sonarQubeModules = publishedModules

    publishArtifacts = true
    checkCodeQuality = true
    ignoreFailures = true
}


apply plugin: "idea"

apply plugin: "net.nemerosa.versioning"
apply plugin: "de.gliderpilot.semantic-release"
apply from: file("gradle/credentials.gradle")
apply from: file("gradle/compile.gradle")
apply from: file("gradle/properties.gradle")
apply from: file("gradle/idea/idea.gradle")
apply from: file("gradle/sonarqube.gradle")

allprojects {
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        dependencies {
            dependency "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
            dependency "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
            dependency "org.apache.logging.log4j:log4j-core:${log4jVersion}"
            dependency "org.apache.logging.log4j:log4j-jul:${log4jVersion}"
            dependency "com.google.guava:guava:24.0-jre"
        }
    }

}


subprojects { subProject ->

    if (subProject in publishedModules) {
        apply plugin: "com.zyxist.chainsaw"
        apply plugin: "org.junit.platform.gradle.plugin"
        apply from: file("$rootDir/gradle/publishing.gradle")
        apply from: "$rootDir/gradle/bintray.gradle"
        apply from: "$rootDir/gradle/artifactory.gradle"
        apply from: "$rootDir/gradle/code-quality.gradle"
        // common dependencies
        dependencies {
            // JUnit Jupiter API and TestEngine implementation
            testImplementation("org.junit.jupiter:junit-jupiter-api")
            testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

            // To use Log4J's LogManager
            testRuntimeOnly("org.apache.logging.log4j:log4j-core")
            testRuntimeOnly("org.apache.logging.log4j:log4j-jul")

            implementation "com.google.guava:guava"
        }

    }

    if (subProject in sonarQubeModules) {
        apply from: file("$rootDir/gradle/coverage.gradle")

    }

    if (subProject in integTestModules) {
        apply from: file("$rootDir/gradle/integrationTest.gradle")
    }
    if (project in benchmarkModules) {
        apply from: "$rootDir/gradle/jmh.gradle"
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

}

private List<Project> getPublishedProjects() {
    List<Project> publishedModules = []
    subprojects.each { project ->
        if (project.name.indexOf(rootProject.name) != -1) {
            publishedModules.add(project)
            println("Find published module ${project.name} in root project ${rootProject.name}")
        }
    }
    return publishedModules
}

semanticRelease {
    repo {
        ghToken = project.ext.ghToken
//        releaseAsset aggregateJar, contentType: "application/zip"
//        releaseAsset aggregateSourcesJar, label: "the sources of the project", contentType:
//                "application/zip"
//        releaseAsset aggregateJavadocJar, label: "the javadoc of the project", contentType:
//                "application/zip"
    }
}


allprojects { subProject ->
    if (subProject.plugins.hasPlugin(JavaPlugin)) {

        test {
            useJUnitPlatform {
            }

        }

        junitPlatformTest {

            jacoco {
                append = false
                destinationFile = file("$buildDir/jacoco/test.exec")
            }

        }

    }
}


configure(rootProject) {
    task aggregateJavadocs(type: Javadoc) {


        group = "Documentation"
        description = "Generates aggregated Javadocs"
        title = "JUnit ${version} API"

        setDependsOn subprojects.collect { it.tasks.getByName("jar") }

        // Use external javadoc.options to inject unsupported options, like:
        //   options.addStringOption('-html5')
        // options.optionFiles(rootProject.file("src/javadoc/javadoc.options"))

        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.use = true
        options.splitIndex = true
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addMultilineStringsOption('tag').setValue(['apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'])
        options.encoding = 'UTF-8'
        options.jFlags '-Xmx1g'
        options.links(

                'https://docs.oracle.com/javase/8/docs/api/'

        )

        //options.stylesheetFile rootProject.file("src/javadoc/stylesheet.css")

        options

                .group("Jupiter", ["org.softcake.cucumber.actors.*"])

                .group("Vintage", ["org.softcake.cucumber.fairy.*"])

        //setSource subprojects.collect { it.sourceSets.main.allJava }


        maxMemory = "1024m"
        destinationDir = new File(buildDir, "docs/javadoc")

        // Remove Kotlin classes from classpath due to "bad" class file

        // see https://bugs.openjdk.java.net/browse/JDK-8187422

        classpath = files(publishedModules.collect { it.sourceSets.main.compileClasspath })

            subprojects.each { proj ->
                proj.tasks.withType(Javadoc).each { javadocTask ->
                    source += javadocTask.source
                    classpath += javadocTask.classpath
                    excludes += ["module-info.java"]
                    includes += javadocTask.includes


                }
            }



    }
}