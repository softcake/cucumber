/*
 *
 * Copyright 2018 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
        classpath "gradle.plugin.com.zyxist:chainsaw:0.1.3"
        classpath "com.netflix.nebula:nebula-project-plugin:3.4.1"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "ru.vyarus:gradle-pom-plugin:1.2.0"
        classpath "net.nemerosa:versioning:2.0.0"
        classpath "ru.vyarus:gradle-github-info-plugin:1.1.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
        classpath "gradle.plugin.de.gliderpilot.gradle.semantic-release:gradle-semantic-release-plugin:1.4.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.2"
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
//        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
//        classpath "de.schauderhaft.degraph:degraph-check:0.1.4"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.6"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16"
//        classpath "com.gradle:build-scan-plugin:1.11"
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
        classpath "gradle.plugin.io.morethan.jmhreport:gradle-jmh-report:0.7.0"
//        classpath "gradle.plugin.org.gradle.guides:gradle-guides-plugin:0.11.3"
        //classpath 'com.selesse:gradle-git-changelog:0.2.+'
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.55"

    }
}

description = "The Cucumber Project"

allprojects {

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    apply plugin: "ru.vyarus.github-info"
    github {
        user "softcake"
        license "Apache"
        repository rootProject.name
    }

    group = "${reverseDomain}.${github.repository}"

}

ext {
    junit4Version = "4.12"
    junitVintageVersion = "5.1.0"
    junitPlatformVersion = "1.1.0"
    junitJupiterVersion = "5.1.0"
    log4jVersion = "2.9.0"
}

ext {

    publishedModules = getPublishedProjects()

    integTestModules = publishedModules.findAll {
        (it.name in ["cucumber.actors"])
    }

    benchmarkModules = publishedModules.findAll {
        (it.name in ["cucumber.actors"])
    }

    sonarQubeModules = publishedModules

    documentationModule = project(":documentation")

    publishArtifacts = false
    checkCodeQuality = true
    ignoreFailures = true
}


apply plugin: "idea"

apply plugin: "net.nemerosa.versioning"
apply plugin: "de.gliderpilot.semantic-release"
apply from: file("gradle/credentials.gradle")
apply from: file("gradle/compile.gradle")
apply from: file("gradle/properties.gradle")
apply from: file("gradle/idea/idea.gradle")
apply from: file("gradle/sonarqube.gradle")

allprojects {
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        dependencies {
            dependency "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
            dependency "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
            dependency "org.apache.logging.log4j:log4j-core:${log4jVersion}"
            dependency "org.apache.logging.log4j:log4j-jul:${log4jVersion}"
            dependency "com.google.guava:guava:24.0-jre"
        }
    }

}


subprojects { subProject ->

    if (subProject in publishedModules) {
        apply plugin: "com.zyxist.chainsaw"
        apply plugin: "org.junit.platform.gradle.plugin"
        apply from: file("$rootDir/gradle/publishing.gradle")
        apply from: "$rootDir/gradle/bintray.gradle"
        apply from: "$rootDir/gradle/artifactory.gradle"
        apply from: "$rootDir/gradle/code-quality.gradle"

        // common dependencies
        dependencies {
            // JUnit Jupiter API and TestEngine implementation
            testImplementation("org.junit.jupiter:junit-jupiter-api")
            testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

            // To use Log4J's LogManager
            testRuntimeOnly("org.apache.logging.log4j:log4j-core")
            testRuntimeOnly("org.apache.logging.log4j:log4j-jul")

            implementation "com.google.guava:guava"
        }

    }
    if (subProject in documentationModule) {
        apply plugin: "com.zyxist.chainsaw"
        apply plugin: "org.junit.platform.gradle.plugin"
        //apply from: file("$rootDir/gradle/publishing.gradle")
        //apply from: "$rootDir/gradle/code-quality.gradle"
        //apply from: file("$rootDir/gradle/coverage.gradle")
        // common dependencies
        dependencies {
            // JUnit Jupiter API and TestEngine implementation
            testImplementation("org.junit.jupiter:junit-jupiter-api")
            testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

            // To use Log4J's LogManager
            testRuntimeOnly("org.apache.logging.log4j:log4j-core")
            testRuntimeOnly("org.apache.logging.log4j:log4j-jul")

            implementation "com.google.guava:guava"
        }

    }

    if (subProject in sonarQubeModules) {
        apply from: file("$rootDir/gradle/coverage.gradle")
    }

    if (subProject in integTestModules) {
        apply from: file("$rootDir/gradle/integrationTest.gradle")
    }

    if (project in benchmarkModules) {
        apply from: "$rootDir/gradle/jmh.gradle"
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

}

private List<Project> getPublishedProjects() {
    List<Project> publishedModules = []
    subprojects.each { project ->
        if (project.name.indexOf(rootProject.name) != -1) {
            publishedModules.add(project)
            println("Find published module ${project.name} in root project ${rootProject.name}")
        }
    }
    return publishedModules
}

semanticRelease {
    repo {
        ghToken = project.ext.ghToken
//        releaseAsset aggregateJar, contentType: "application/zip"
//        releaseAsset aggregateSourcesJar, label: "the sources of the project", contentType:
//                "application/zip"
//        releaseAsset aggregateJavadocJar, label: "the javadoc of the project", contentType:
//                "application/zip"
    }
}


allprojects { subProject ->
    if (subProject.plugins.hasPlugin(JavaPlugin)) {
        subProject.afterEvaluate {
            javadoc {
                inputs.property("moduleName", javaModule.name)

                doFirst {

                    options.addStringOption('-module-path', classpath.asPath)

                }

                afterEvaluate {
                    options.header = "${project.description} of ${rootProject.description}."
                }
                options.memberLevel = JavadocMemberLevel.PROTECTED
                options.author = true
                options.header = project.name
                options.addStringOption('Xdoclint:html,syntax', '-quiet')
                options.addMultilineStringsOption('tag').setValue(['apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'])
                options.encoding = 'UTF-8'
                options.links('http://docs.oracle.com/javase/9/docs/api/',
                        'http://google.github.io/guava/releases/21.0/api/docs/')
            }
        }

        test {
            useJUnitPlatform {
            }

            reports {
                junitXml.enabled = true
                junitXml.destination(file('build/test-results/folder'))
            }
        }

        junitPlatformTest {
            if (project.plugins.hasPlugin(JacocoPlugin)) {

                jacoco {
                    append = false
                    destinationFile = file("$buildDir/jacoco/test.exec")
                }
            }

        }
    }
}

evaluationDependsOnChildren()
task aggregateJavadocs(type: Javadoc) {

    group JavaBasePlugin.DOCUMENTATION_GROUP

    description = "Generates aggregated Javadocs"
    title = Character.toUpperCase(project.name.charAt(0)).toString() + project.name.substring(1) + " ${version} API"
    def moduleNames = ""

    publishedModules.each { proj ->

        options.group(proj.name, [project.reverseDomain + "." + proj.name + ".*"])
        moduleNames += proj.javaModule.name + ","
        proj.tasks.create("copyModules", Copy) {
            group JavaBasePlugin.BUILD_TASK_NAME
            from 'src/main/java'
            into "$rootProject.buildDir/docscr/${proj.javaModule.name}"
        }
    }

    moduleNames = moduleNames.subSequence(0, moduleNames.length() - 1)

    setDependsOn publishedModules.collect { it.tasks.getByName("copyModules") }
    setSource file("$buildDir/docscr")

    maxMemory = "1024m"
    destinationDir = new File(buildDir, "docs/javadoc")
    classpath = files(publishedModules.collect { it.sourceSets.main.compileClasspath })

    options.addStringOption('-module', moduleNames)

    options.addStringOption('-module-source-path', "$rootProject.buildDir/docscr/")
    options.addStringOption('-module-path', classpath.asPath)
    options.addStringOption('-html5')
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = rootProject.description
    options.use = true
    options.splitIndex = true
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addMultilineStringsOption('tag').setValue(['apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'])
    options.encoding = 'UTF-8'
    options.jFlags '-Xmx1g'
    options.links(
            'https://docs.oracle.com/javase/9/docs/api/'
    )
}

project(":documentation") {

    apply plugin: 'org.asciidoctor.convert'

    asciidoctorj {
        version = '1.5.4'
    }
    asciidoctor {
        dependsOn tasks.getByName("gitChangelogTask")
        sourceDir "content"
        //outputDir { project.buildDir }
        sources {
            include 'index.adoc'
        }
        backends = ['html5', 'pdf']
        inputs.dir files('src')

        //noinspection GroovyAssignabilityCheck
        attributes 'source-highlighter': 'highlightjs',
                'highlightjs-theme': 'pojoaque',  //'solarized_light', 'monokai_sublime' railscasts, pojoaque, androidstudio
                icons: 'font',
                numbered: '',
                idprefix: '',
                'docinfo1': '',
                sectanchors: true,
                sectlinks: true,
                linkattrs: true,
                encoding: 'utf-8',
                toc: 'left',
                toclevels: 2,
                'toc-title': 'Contents',
                'projectName': rootProject.description,
                imagesdir: 'images',
                stylesheet: "stylesheets/riak.css"

        attributes testDir: file("src/test/java")
        attributes mainDir: file("src/main/java")
        attributes changelogDir: file("build/changelog")

        resources {
            from rootProject.tasks.getByName('aggregateJavadocs') {
                into 'api'
            }
        }

    }
}

apply from: file('gradle/ghPages.gradle')
